{"version":3,"sources":["Patient.js","images/location.png","images/tracker.png","PostMessage.js","App.js","index.js"],"names":["rxnorm","MedRow","med","name","out","coding","find","c","system","display","getMedicationName","getPath","status","intent","Patient","patient","meds","console","log","className","style","padding","map","id","PostMessageFrame","handleResizeApp","width","window","parent","postMessage","type","method","methodVersion","newWidth","marginBottom","onClick","setTimeout","App","sessionStorage","clear","messagePayload","targetOrigin","opener","e","error","Error","String","rootElement","document","getElementById","SMART","init","clientId","scope","pkceMode","fullSessionStorageSupport","completeInTarget","then","client","Promise","all","read","catch","err","request","render","undefined"],"mappings":"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","file":"static/js/main.7f732a82.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { getPath } from \"fhirclient/lib/lib\";\nimport { PatientVisualizer } from 'fhir-visualizers';\n\nconst rxnorm = \"http://www.nlm.nih.gov/research/umls/rxnorm\";\n\nfunction getMedicationName(medCodings = []) {\n  let out = \"Unnamed Medication(TM)\";\n  const coding = medCodings.find((c) => c.system === rxnorm);\n  if (coding && coding.display) {\n    out = coding.display;\n  }\n  return out;\n}\n\nfunction PatientName({ name = [] }) {\n  let entry =\n    name.find((nameRecord) => nameRecord.use === \"official\") || name[0];\n  if (!entry) {\n    return <h1>No Name</h1>;\n  }\n  return <h1>{entry.given.join(\" \") + \" \" + entry.family}</h1>;\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction PatientBanner(patient) {\n  return (\n    <div>\n      <PatientName name={patient.name} />\n      <span>\n        Gender: <b>{patient.gender}</b>,{\" \"}\n      </span>\n      <span>\n        DOB: <b>{patient.birthDate}</b>\n      </span>\n    </div>\n  );\n}\n\nfunction MedRow({ med }) {\n  const name = getMedicationName(\n    getPath(med, \"medicationCodeableConcept.coding\") ||\n    getPath(med, \"medicationReference.code.coding\")\n  );\n  return (\n    <tr>\n      <td>\n        <b>{name}</b>\n      </td>\n      <td>{med.status || \"-\"}</td>\n      <td>{med.intent || \"-\"}</td>\n      <td>{getPath(med, \"dosageInstruction.0.text\") || \"-\"}</td>\n    </tr>\n  );\n}\n\nfunction Patient({\n  patient,\n  meds,\n}) {\n  console.log(patient);\n  return (\n    <div className=\"App\" style={{ padding: '20px' }}>\n      {patient ? <PatientVisualizer patient={patient} /> : <></>}\n      <hr />\n      {meds ? <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th>Medication</th>\n            <th>Status</th>\n            <th>Intent</th>\n            <th>Dosage Instruction</th>\n          </tr>\n        </thead>\n        <tbody>\n          {meds.map((med) => (\n            <MedRow key={med.id} med={med} />\n          ))}\n        </tbody>\n      </table> : <></>}\n    </div>\n  );\n}\n\nexport default Patient;","export default __webpack_public_path__ + \"static/media/location.8fd9cd85.png\";","export default __webpack_public_path__ + \"static/media/tracker.1543b769.png\";","import React from 'react';\n\nexport function PostMessageFrame() {\n  const handleRefreshClick = () => {\n    window.parent.postMessage(\n      { \n        type: 'embeddedAppAPIMessage', \n        method: 'notifyPatientDataChange', \n        methodVersion: \"1.0.0\" \n      }, \"*\"\n    );\n  };\n\n  const handleMinimizeApp = () => {\n    console.log(\"Sending message from our test fake iframe\");\n    window.parent.postMessage(\n      { \n        type: 'embeddedAppAPIMessage', \n        method: 'appMinimize', \n        methodVersion: \"1.0.0\" \n      }, \"*\"\n    );\n  };\n\n  const handleReopenApp = () => {\n    window.setTimeout(() => {\n      window.parent.postMessage(\n        { \n          type: 'embeddedAppAPIMessage', \n          method: 'appReopen', \n          methodVersion: \"1.0.0\" \n        }, \"*\"\n      );\n    }, 3000);\n  };\n\n  const handleCloseApp = () => {\n    window.parent.postMessage(\n      { \n        type: 'embeddedAppAPIMessage', \n        method: 'appClose', \n        methodVersion: \"1.0.0\" \n      }, \"*\"\n    );\n  };\n\n  const handleEnterFullScreenApp = () => {\n    window.parent.postMessage(\n      { \n        type: 'embeddedAppAPIMessage', \n        method: 'appEnterFullscreen', \n        methodVersion: \"1.0.0\" \n      }, \"*\"\n    );\n  };\n\n  const handleExitFullScreenApp = () => {\n    window.parent.postMessage(\n      { \n        type: 'embeddedAppAPIMessage', \n        method: 'appExitFullscreen', \n        methodVersion: \"1.0.0\" \n      }, \"*\"\n    );\n  };\n\n  const handlePopoutApp = () => {\n    window.parent.postMessage(\n      { \n        type: 'embeddedAppAPIMessage', \n        method: 'appPopout', \n        methodVersion: \"1.0.0\" \n      }, \"*\"\n    );\n  };\n\n  const handlePopinApp = () => {\n    window.parent.postMessage(\n      { \n        type: 'embeddedAppAPIMessage', \n        method: 'appPopin', \n        methodVersion: \"1.0.0\" \n      }, \"*\"\n    );\n  };\n\n  const handleResizeApp = (width) => {\n    window.parent.postMessage(\n      { \n        type: 'embeddedAppAPIMessage', \n        method: 'appResize', \n        methodVersion: \"1.0.0\", \n        newWidth: width \n      }, \"*\"\n    );\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <div style={{ marginBottom: '20px' }}>\n        <button type=\"button\" onClick={handleRefreshClick}>Refresh aOne</button>\n        <button type=\"button\" onClick={handleMinimizeApp}>Minimize</button>\n        <button type=\"button\" onClick={handleReopenApp}>Reopen in 3 seconds</button>\n        <button type=\"button\" onClick={handleCloseApp}>Close</button>\n        <button type=\"button\" onClick={handleEnterFullScreenApp}>Enter FullScreen</button>\n        <button type=\"button\" onClick={handleExitFullScreenApp}>Exit FullScreen</button>\n        <button type=\"button\" onClick={handlePopoutApp}>Popout</button>\n        <button type=\"button\" onClick={handlePopinApp}>Popin</button>\n      </div>\n      <div>\n        <button type=\"button\" onClick={() => handleResizeApp('50')}>50px</button>\n        <button type=\"button\" onClick={() => handleResizeApp('100')}>100px</button>\n        <button type=\"button\" onClick={() => handleResizeApp('200')}>200px</button>\n        <button type=\"button\" onClick={() => handleResizeApp('400')}>400px</button>\n        <button type=\"button\" onClick={() => handleResizeApp('600')}>600px</button>\n        <button type=\"button\" onClick={() => handleResizeApp('800')}>800px</button>\n        <button type=\"button\" onClick={() => handleResizeApp('default')}>default</button>\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport Patient from './Patient'\nimport StaticPatient from './StaticPatient';\nimport { PostMessageFrame } from \"./PostMessage\";\n\n\nfunction App({ patient, meds }) {\n  sessionStorage.clear()\n\n  if (!(patient)) console.log('Rendering Static App');\n  if (patient) return <Patient patient={patient} meds ={meds}/>;\n  else return (\n    <div>\n      <PostMessageFrame/>\n      <hr />\n      <button \n        onClick= {() => {\n          const messagePayload = {\n            type: 'embeddedAppAPIMessage',\n            method: 'notifyPatientDataChange',\n            methodVersion: \"1.0.0\"\n          };\n          const targetOrigin = '*'; // Consider using a specific target origin in production for security\n      \n          // Notify parent window (e.g., iframe parent or opener parent, if opened from a \"new window\" button)\n          if (window.parent && window.parent !== window) { // Check if it's truly embedded\n            console.log(`(From the App) (window.parent.postMessage) Sending the following message to (${targetOrigin}) :=> `, messagePayload);\n            window.parent.postMessage(messagePayload, targetOrigin);\n          }\n      \n          if (window.opener) {\n            try {\n              console.log(`(From the App) (window.opener.postMessage) Sending the following message to (${targetOrigin}) :=> `, messagePayload);\n              window.opener.postMessage(messagePayload, targetOrigin);\n            } catch (e) {\n              // Log error if postMessage to opener fails (e.g., if the opener window was closed)\n              console.error('AppContent: Error posting message to window.opener', e instanceof Error ? e : new Error(String(e)), { targetOrigin });\n            }\n          }\n        }}\n      > Refresh Patient - Blackbird code </button>\n\n      <button\n          onClick = {() => {\n            console.log(`(From the App) (window.parent.postMessage) Sending the following message to (*}) :=> `, { type: 'embeddedAppAPIMessage', method: 'notifyPatientDataChange', methodVersion: \"1.0.0\" });\n            window.parent.postMessage({ type: 'embeddedAppAPIMessage', method: 'notifyPatientDataChange', methodVersion: \"1.0.0\" }, '*');\n          }}\n      > Refresh Patient - Our code </button>\n  </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n// import { oauth2 as SMART } from \"fhirclient\";\nimport { oauth2 as SMART } from 'fhirclient-pkce';\n\nconst rootElement = document.getElementById('root');\n\nSMART.init({\n    // iss: \"https://r4.smarthealthit.org\",\n    // iss: \"https://api.platform.athenahealth.com/432/brand/2/csg/12/fhir/r4\",\n    // redirectUri: \"index.html\",\n    // clientId: \"0oae0chrocZumXh7y297\",  // Internal AMS\n    clientId: \"0oae3i5p2p4ikNR4C297\",     // External AMS\n    scope: \"launch offline_access openid fhirUser user/MedicationRequest.read user/Patient.read user/Observation.read\",\n    pkceMode: \"required\",\n    fullSessionStorageSupport: false,\n\n    // WARNING: completeInTarget=true is needed to make this work in the codesandbox\n    // frame. It is otherwise not needed if the target is not another frame or window\n    // but since the entire example works in a frame here, it gets confused without\n    // setting this!\n    completeInTarget: true\n    \n})\n    .then(client => {\n        // Fetch MedicationRequest and Patient in parallel to load the app faster\n        // console.log(\"client.patient => \", client.patient);\n        return Promise.all([\n            client.patient.read()\n                .catch(function(err){\n                    console.log(err);\n                    return undefined;\n                }),\n            client.patient.request(\"MedicationRequest\")\n                .catch(function(err){\n                    console.log(err);\n                    return undefined;\n                }),\n            // client.request(`/MedicationRequest?patient=${client.patient.id}`, {\n            //     resolveReferences: \"medicationReference\",\n            //     pageLimit: 0,\n            //     flat: true\n            // }),\n        ]);\n    })\n    .then(\n        ([\n            patient, \n            meds\n        ]) => {\n            render(<App \n                patient={patient} \n                meds={meds}\n            />, rootElement);\n        },\n        error => {\n            console.error(error);\n            render(<App \n                patient={undefined} \n                meds={undefined}\n            />, rootElement);\n        }\n    );\n"],"sourceRoot":""}