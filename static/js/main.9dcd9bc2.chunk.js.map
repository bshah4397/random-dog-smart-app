{"version":3,"sources":["App.js","index.js"],"names":["App","patient","console","log","className","style","padding","rootElement","document","getElementById","SMART","init","clientId","scope","completeInTarget","then","client","alert","JSON","stringify","state","tokenResponse","Promise","all","read","render","error","stack"],"mappings":"mdA4IeA,MA/Bf,YAII,IAHFC,EAGC,EAHDA,QAKA,OADAC,QAAQC,IAAIF,GAEV,sBAAKG,UAAU,MAAMC,MAAO,CAACC,QAAS,QAAtC,UACGL,EAAU,cAAC,IAAD,CAAmBA,QAASA,IAAc,yCACrD,yBAoBL,E,SClIKM,EAAcC,SAASC,eAAe,QAE5CC,SAAMC,KAAK,CAIPC,SAAU,uBACVC,MAAO,wCAMPC,kBAAkB,IAEjBC,MAAK,SAAAC,GAGF,OAFAC,MAAM,kBAAD,OAAmBC,KAAKC,UAAUH,EAAOI,MAAMC,cAAe,KAAM,KAElEC,QAAQC,IAAI,CACfP,EAAOf,QAAQuB,QAUtB,IACAT,MACG,YAAgB,IAAdd,EAAa,oBACXwB,iBAAO,cAAC,EAAD,CACHxB,QAASA,IAGTM,EACP,IACD,SAAAmB,GACIxB,QAAQwB,MAAMA,GACdD,iBACI,qCACI,uBACA,8BAAMC,EAAMC,WAEhBpB,EAEP,G","file":"static/js/main.9dcd9bc2.chunk.js","sourcesContent":["// import './App.css';\n// import { PatientVisualizer } from 'fhir-visualizers';\n// import React, { useState, useEffect } from 'react';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import Image from 'react-bootstrap/Image'\n// import { Container, Row, Col, } from 'react-bootstrap';\n// import { dogPuns } from './dogPuns';\n\n\n\n// function App(props) {\n//   const client = props.client;\n//   const [patient, setPatient] = useState(null);\n//   const [dogImage, setDogImage] = useState(null);\n//   const [dogPunSelected, setDogPunSelected] = useState(null);\n\n//   useEffect(() => { client.patient.read().then((patient) => setPatient(patient)); });\n\n//   useEffect(() => {\n//     const fetchDogImage = async () => {\n//       const response = await fetch('https://random.dog/woof.json?filter=mp4,webm');\n//       const data = await response.json();\n//       setDogImage(data.url);\n//       setDogPunSelected(dogPuns[Math.floor(Math.random() * dogPuns.length)]);\n//     }\n\n//     fetchDogImage();\n//   }, []);\n\n//   return (\n//     <div id=\"app\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', }}>\n//       <Container>\n\n//         <Row className=\"justify-content-md-center\">\n//           <Col md=\"auto\"><h3>{dogPunSelected}</h3></Col>\n//         </Row>\n\n//         <Row className=\"justify-content-md-center\">\n//           {dogImage ? <Col md=\"auto\"><Image src={dogImage} height=\"400px\" /></Col> : <h2>Loading...</h2>}\n//         </Row>\n\n//         <Row className=\"justify-content-md-center\">\n//           {patient ? <Col md=\"auto\"><PatientVisualizer patient={patient} /></Col> : <h1>Loading</h1>}\n//         </Row>\n\n//       </Container>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport * as React from \"react\";\nimport { getPath } from \"fhirclient/lib/lib\";\nimport { PatientVisualizer } from 'fhir-visualizers';\n\nconst rxnorm = \"http://www.nlm.nih.gov/research/umls/rxnorm\";\n\nfunction getMedicationName(medCodings = []) {\n  let out = \"Unnamed Medication(TM)\";\n  const coding = medCodings.find((c) => c.system === rxnorm);\n  if (coding && coding.display) {\n    out = coding.display;\n  }\n  return out;\n}\n\nfunction PatientName({ name = [] }) {\n  let entry =\n    name.find((nameRecord) => nameRecord.use === \"official\") || name[0];\n  if (!entry) {\n    return <h1>No Name</h1>;\n  }\n  return <h1>{entry.given.join(\" \") + \" \" + entry.family}</h1>;\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction PatientBanner(patient) {\n  return (\n    <div>\n      <PatientName name={patient.name} />\n      <span>\n        Gender: <b>{patient.gender}</b>,{\" \"}\n      </span>\n      <span>\n        DOB: <b>{patient.birthDate}</b>\n      </span>\n    </div>\n  );\n}\n\nfunction MedRow({ med }) {\n  const name = getMedicationName(\n    getPath(med, \"medicationCodeableConcept.coding\") ||\n      getPath(med, \"medicationReference.code.coding\")\n  );\n  return (\n    <tr>\n      <td>\n        <b>{name}</b>\n      </td>\n      <td>{med.status || \"-\"}</td>\n      <td>{med.intent || \"-\"}</td>\n      <td>{getPath(med, \"dosageInstruction.0.text\") || \"-\"}</td>\n    </tr>\n  );\n}\n\nfunction App({ \n  patient, \n  // meds, \n  // everything \n}) {\n  console.log(patient);\n  return (\n    <div className=\"App\" style={{padding: '20px'}}>\n      {patient ? <PatientVisualizer patient={patient} /> : <h1>Loading</h1>}\n      <hr/>\n\n      {/* <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th>Medication</th>\n            <th>Status</th>\n            <th>Intent</th>\n            <th>Dosage Instruction</th>\n          </tr>\n        </thead>\n        <tbody>\n          {meds.map((med) => (\n            <MedRow key={med.id} med={med} />\n          ))}\n        </tbody>\n      </table> */}\n      {/* <pre>{ JSON.stringify(meds, null, 4) }</pre> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n// import { oauth2 as SMART } from \"fhirclient\";\nimport { oauth2 as SMART } from 'fhirclient-pkce';\n\nconst rootElement = document.getElementById('root');\n\nSMART.init({\n    // iss: \"https://r4.smarthealthit.org\",\n    // iss: \"https://api.platform.athenahealth.com/432/brand/2/csg/12/fhir/r4\",\n    // redirectUri: \"index.html\",\n    clientId: \"0oae0chrocZumXh7y297\",\n    scope: \"launch offline_access openid fhirUser\",\n\n    // WARNING: completeInTarget=true is needed to make this work in the codesandbox\n    // frame. It is otherwise not needed if the target is not another frame or window\n    // but since the entire example works in a frame here, it gets confused without\n    // setting this!\n    completeInTarget: true\n})\n    .then(client => {\n        alert(`access_token = ${JSON.stringify(client.state.tokenResponse, null, 4)}`);\n        // Fetch MedicationRequest and Patient in parallel to load the app faster\n        return Promise.all([\n            client.patient.read(),\n            // client.request(`/MedicationRequest?patient=${client.patient.id}`, {\n            //     resolveReferences: \"medicationReference\",\n            //     pageLimit: 0,\n            //     flat: true\n            // }),\n            // client.request(`/Patient/${client.patient.id}/$everything`, { \n            //     flat: true, pageLimit: 0 \n            // })\n        ]);\n    })\n    .then(\n        ([patient]) => {\n            render(<App \n                patient={patient} \n                // meds={meds} \n                // everything={everything}\n            />, rootElement);\n        },\n        error => {\n            console.error(error);\n            render(\n                <>\n                    <br />\n                    <pre>{error.stack}</pre>\n                </>,\n                rootElement\n            );\n        }\n    );\n"],"sourceRoot":""}